#cloud-config
fqdn: devbox.dev.local
hostname: devbox
manage_etc_hosts: true
package_update: true
package_upgrade: true
timezone: America/Toronto
growpart:
  mode: auto
  ignore_growroot_disabled: false
  devices: [/]
users:
  - default
  - name: admin
    groups: sudo,docker
    sudo: ALL=(ALL) NOPASSWD:ALL
    ssh_authorized_keys:
      - ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIKgAbVwkk5l/yxWjA+VzbX6htL96fQXFxsqJjXqkCTE0
apt:
  sources:
    docker.list:
      source: deb https://download.docker.com/linux/ubuntu noble stable
      keyid: 9DC858229FC7DD38854AE2D88D81803C0EBFCD88
packages:
  - apparmor
  - apt-transport-https
  - ca-certificates
  - conntrack
  - containerd.io
  - curl
  - docker-ce
  - docker-ce-cli
  - gnupg
  - gnupg-agent
  - libseccomp2
  - openssh-server
  - software-properties-common
write_files:
  - path: /etc/environment
    permissions: "0644"
    owner: root
    content: |
      PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin"
      EDITOR="vim"
  - path: /usr/lib/systemd/system/user@.service.d/delegate.conf
    permissions: "0644"
    owner: root
    content: |
      [Service]
      Delegate=cpu cpuset io memory pids
  - path: /etc/motd
    permissions: "0644"
    owner: root
    content: |
      ===========================================
        Welcome to DevBox ðŸš€
      ===========================================

      Hostname: $(hostname)
      Purpose:  FRR for Cilium BGP, WireGuard VPN, Bind9 DNS, and more.

      Useful Info:
        - This is your development environment.
        - Docker & containerd are pre-installed.
        - SSH access enabled for devcontainer user.
        - Bind9 is installed for cert-manager and external-dns.

      Enjoy hacking in your sandbox!
      ===========================================
  - path: /etc/k0s/containerd.d/systemd.toml
    permissions: "0644"
    owner: root
    content: |
      [plugins]
        [plugins."io.containerd.grpc.v1.cri"]
            [plugins."io.containerd.grpc.v1.cri".containerd.runtimes]
              [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc]
                [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc.options]
                  SystemdCgroup = true
  - path: /etc/bind/named.conf.devbox-zones
    permissions: "0644"
    owner: bind
    content: |
      include "/etc/bind/devbox.key";

      zone "dev.local" IN {
        type primary;
        file "/var/cache/bind/db.devbox";

        allow-transfer {
          key "externaldns";
        };

        update-policy {
          grant externaldns zonesub ANY;
        };
      };
  - path: /etc/bind/devbox.key
    permissions: "0644"
    owner: bind
    content: |
      key "externaldns" {
        algorithm hmac-sha256;
        secret "e9Y40wFrHQVIBtjy5auUdf2HcIROeWy0X46WqAvhBm4=";
      };
  - path: /opt/db.devbox.tmpl
    permissions: "0644"
    owner: bind
    content: |
      $TTL    604800
      @       IN      SOA     ns.dev.local. admin.dev.local. (
                                    2         ; Serial
                              604800         ; Refresh
                                86400         ; Retry
                              2419200         ; Expire
                              604800 )       ; Negative Cache TTL
      ;
      @       IN      NS      ns.dev.local.
      ns      IN      A       ${server_ip}
  - path: /opt/frr.conf.tmpl
    permissions: "0644"
    owner: root
    content: |
      # default to using syslog. /etc/rsyslog.d/45-frr.conf places the log in
      # /var/log/frr/frr.log
      #
      # Note:
      # FRR's configuration shell, vtysh, dynamically edits the live, in-memory
      # configuration while FRR is running. When instructed, vtysh will persist the
      # live configuration to this file, overwriting its contents. If you want to
      # avoid this, you can edit this file manually before starting FRR, or instruct
      # vtysh to write configuration to a different file.
      frr defaults traditional
      log syslog informational
      service integrated-vtysh-config
      hostname ${hostname}
      #debug bgp events
      #debug bgp filters
      #debug bgp fsm
      #debug bgp keepalives
      #debug bgp updates
      !
      router bgp ${bgp_as}
      bgp router-id ${server_ip}
      bgp log-neighbor-changes
      no bgp ebgp-requires-policy
      no bgp default ipv4-unicast
      bgp bestpath as-path multipath-relax
      no bgp network import-check
      neighbor cilium peer-group
      neighbor cilium remote-as external
      neighbor cilium password changeme
      neighbor cilium ebgp-multihop 4
      neighbor cilium capability extended-nexthop
      !
      address-family ipv4 unicast
        neighbor cilium activate
      exit-address-family
      exit
      !
  - path: /opt/wg0.conf.tmpl
    permissions: "0644"
    owner: root
    content: |
      # /etc/wireguard/wg0.conf
      [Interface]
      Address = ${ipv4_addr}, ${ipv6_addr}
      ListenPort = ${wg_port}
      PrivateKey = ${privkey}

      PostUp = iptables -I INPUT -i wg0 -j ACCEPT
      PostUp = iptables -I FORWARD -i wg0 -j ACCEPT
      PostUp = iptables -I FORWARD -o wg0 -j ACCEPT

      PostUp = iptables -t nat -I POSTROUTING -s ${ipv4_addr} -o ${netdev} -j MASQUERADE
      PostUp = iptables -I INPUT -i ${netdev} -p udp --dport 51820 -j ACCEPT

      PostUp = ip6tables -I INPUT -i wg0 -j ACCEPT
      PostUp = ip6tables -I FORWARD -i wg0 -j ACCEPT
      PostUp = ip6tables -I FORWARD -o wg0 -j ACCEPT

      PostUp = ip6tables -I INPUT -i ${netdev} -p udp --dport 51820 -j ACCEPT

      PreDown = iptables -D INPUT -i wg0 -j ACCEPT
      PreDown = iptables -D FORWARD -i wg0 -j ACCEPT
      PreDown = iptables -D FORWARD -o wg0 -j ACCEPT

      PreDown = iptables -t nat -D POSTROUTING -s ${ipv4_addr} -o ${netdev} -j MASQUERADE
      PreDown = iptables -D INPUT -i ${netdev} -p udp --dport 51820 -j ACCEPT

      PreDown = ip6tables -D INPUT -i wg0 -j ACCEPT
      PreDown = ip6tables -D FORWARD -i wg0 -j ACCEPT
      PreDown = ip6tables -D FORWARD -o wg0 -j ACCEPT

      PreDown = ip6tables -D INPUT -i ${netdev} -p udp --dport 51820 -j ACCEPT

      [Peer]
      AllowedIPs = ${IP4_RANGE}, ${IP6_RANGE}
      PublicKey = ${pubkey}
  - path: /opt/wg0.client.tmpl
    permissions: "0644"
    owner: root
    content: |
      # /etc/wireguard/client.conf
      [Interface]
      Address = ${ipv4_addr}, ${ipv6_addr}
      DNS = ${dns_servers}
      PrivateKey = ${privkey}

      [Peer]
      AllowedIPs = ${ipv4_addr}, ${ipv6_addr}, ${allowed_ips}
      Endpoint = ${server_ip}:${wg_port}
      PublicKey = ${pubkey}
  - path: /opt/bootstrap.sh
    permissions: "0755"
    owner: root
    content: |
      #!/bin/bash
      set -exo pipefail

      ipv6() {
        timestamp="$(date +%s%N)"
        machineid="$(cat /etc/machine-id)"
        shasum="$(printf ${timestamp}${machineid} | sha1sum)"
        bytes="$(printf ${shasum} | cut -c 31- | tr -d '-')"

        printf fd${bytes:0:2}:${bytes:2:4}:${bytes:4:4}::/64
      }

      # MARK: - pre

      sudo apt-get update -yq
      sudo apt-get install -y --no-install-recommends \
        bind9 \
        frr \
        qrencode \
        wireguard

      # MARK: - networking

      : "${VIP:="172.16.254.0/24"}"
      : "${IP4_RANGE:="10.10.10.0/24"}"
      : "${IP6_RANGE:="$(ipv6)"}"

      upstream_dns="172.16.0.1"
      ipv4_net="$(printf ${IP4_RANGE} | cut -d '/' -f 1)"
      ipv6_net="$(printf ${IP6_RANGE} | cut -d '/' -f 1)"

      export server_ip="$(ip route list default | awk '{ print $3 }')"

      # config network
      sudo sed -i 's/[#]net.ipv4.ip_forward.*/net.ipv4.ip_forward=1/g' /etc/sysctl.conf
      sudo sed -i 's/[#]net.ipv6.conf.all.forwarding.*/net.ipv6.conf.all.forwarding=1/g' /etc/sysctl.conf
      sudo sysctl -p
      sudo ufw allow bgp
      sudo ufw allow bind9
      sudo ufw allow ${wg_port}/udp

      # reload firewall
      sudo ufw --force disable
      sudo ufw --force enable
      sudo ufw status

      # MARK: - bind

      # configure bind9
      echo 'include "/etc/bind/named.conf.devbox-zones";' | sudo tee -a /etc/bind/named.conf
      envsubst < /opt/db.devbox.tmpl | sudo tee /var/cache/bind/db.devbox >/dev/null
      sudo systemctl restart named.service

      # check bind configuration
      sudo named-checkzone dev.local /var/cache/bind/db.devbox
      sudo rndc zonestatus dev.local

      # MARK: - frr

      # enable bgpd
      sudo sed -i 's/bgpd=.*/bgpd=yes/g' /etc/frr/daemons
      sudo systemctl enable frr.service
      sudo systemctl restart frr.service

      # generate config
      envsubst < /opt/frr.conf.tmpl | sudo tee /etc/frr/frr.conf >/dev/null

      # MARK: - wireguard

      export wg_port=51820

      # create server key pair
      server_priv_key="/etc/wireguard/private.key"
      server_pub_key="/etc/wireguard/public.key"
      if ! sudo stat "${server_priv_key}" >/dev/null; then
        wg genkey | sudo tee "${server_priv_key}" >/dev/null
        sudo chmod go= "${server_priv_key}"
      fi
      sudo stat "${server_pub_key}" >/dev/null ||
        sudo cat "${server_priv_key}" | wg pubkey | sudo tee "${server_pub_key}" >/dev/null

      # create client key pair
      client_priv_key="/etc/wireguard/client.private.key"
      client_pub_key="/etc/wireguard/client.public.key"
      if ! sudo stat "${client_priv_key}" >/dev/null; then
        wg genkey | sudo tee "${client_priv_key}" >/dev/null
        sudo chmod go= "${client_priv_key}"
      fi
      sudo stat "${client_pub_key}" >/dev/null ||
        sudo cat "${client_priv_key}" | wg pubkey | sudo tee "${client_pub_key}" >/dev/null

      # generate server config
      if ! sudo stat /etc/wireguard/wg0.conf >/dev/null; then
        export privkey="$(sudo cat ${server_priv_key})"
        export pubkey="$(sudo cat ${client_pub_key})"
        export netdev="$(ip route list default | awk '{ print $5 }')"
        export ipv4_addr="$(printf ${ipv4_net%?}1)/24"
        export ipv6_addr="$(printf ${ipv6_net%?}:1)/64"

        envsubst < /opt/wg0.conf.tmpl | sudo tee /etc/wireguard/wg0.conf >/dev/null
        sudo systemctl enable quick@wg0.service
        sudo systemctl restart quick@wg0.service
      fi


      # generate client config
      if ! stat client.conf >/dev/null && ! stat client.png >/dev/null; then
        export privkey="$(sudo cat ${client_priv_key})"
        export pubkey="$(sudo cat ${server_pub_key})"
        export ipv4_addr="$(printf ${ipv4_net%?}2)/24"
        export ipv6_addr="$(printf ${ipv6_net%?}:2)/64"
        export dns_servers="${server_ip}, ${upstream_dns}"
        export allowed_ips="${IP4_RANGE}, ${IP6_RANGE}, ${VIP}"

        envsubst < /opt/client.conf.tmpl | tee client.conf >/dev/null
        qrencode -s 10 -l H -o client.png < client.conf
      fi
  - path: /opt/configure.sh
    permissions: "0755"
    owner: root
    content: |
      #!/bin/bash
      set -exo pipefail

      : "${LOCALE:="C.UTF-8"}"
      : "${TIMEZONE:="America/Toronto"}"

      # disable swap
      swapoff -a && sed -ri '/\sswap\s/s/^#?/#/' /etc/fstab || true

      # set locale
      localectl set-locale LANG="${LOCALE}"

      # set timezone
      timedatectl set-ntp true
      timedatectl set-timezone "${TIMEZONE}"
runcmd:
  - /opt/configure.sh
  - /opt/bootstrap.sh
bootcmd:
  - stat -c %T -f /sys/fs/cgroup
